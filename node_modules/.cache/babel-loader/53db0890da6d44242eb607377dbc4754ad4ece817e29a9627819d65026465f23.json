{"ast":null,"code":"var _jsxFileName = \"/Users/chooiseok/Documents/GitHub/Frontend-hab-eat/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n// import UserInfoPage from './pages/UserInfoPage';\n// import NutritionPage from './pages/NutritionPage';\n// import NavigationBar from './components/NavigationBar';\n// import MyPage from './pages/MyPage';\n// import Settings from './pages/Settings';\n// import Guide from './pages/Guide';\n// import Notifications from './pages/Notifications';\n// import PrivacyPolicy from './pages/PrivacyPolicy';\n\n// const App = () => {\n//   const [isInfoComplete, setIsInfoComplete] = useState(false);\n\n//   const handleInfoComplete = () => {\n//     setIsInfoComplete(true);\n//   };\n\n//   return (\n//     <Router>\n//       <div style={{ paddingBottom: '80px' }}> {/* 네비게이션 바 높이만큼 여백 추가 */}\n//         <Routes>\n//           <Route\n//             path=\"/\"\n// element={\n//   isInfoComplete ? (\n//     <Navigate to=\"nutrition\" />\n//   ) : (\n// <UserInfoPage onComplete={handleInfoComplete} />\n//               )\n//             }\n//           />\n//           <Route path=\"/nutrition\" element={<NutritionPage />} />\n//           <Route path=\"/habit\" element={<div>습관 페이지 준비중...</div>} />\n//           <Route path=\"/mypage\" element={<MyPage />} />\n//           <Route path=\"/settings\" element={<Settings />} />\n//           <Route path=\"/guide\" element={<Guide />} />\n//           <Route path=\"/settings/edit-profile\" element={<UserInfoPage />} />\n//           <Route path=\"/settings/notifications\" element={<Notifications />} />\n//           <Route path=\"/settings/privacy-policy\" element={<PrivacyPolicy />} />\n//         </Routes>\n//         <NavigationBar /> {/* 네비게이션 바 추가 */}\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\n// import LoginPage from \"./pages/LoginPage\";\n// import UserInfoPage from \"./pages/UserInfoPage\";\n// import NutritionPage from \"./pages/NutritionPage\";\n// import NavigationBar from \"./components/NavigationBar\";\n// import MyPage from \"./pages/MyPage\";\n// import Settings from \"./pages/Settings\";\n// import Guide from \"./pages/Guide\";\n// import Notifications from \"./pages/Notifications\";\n// import PrivacyPolicy from \"./pages/PrivacyPolicy\";\n\n// const App = () => {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n//   const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n//   const handleLoginSuccess = () => {\n//     setIsAuthenticated(true); // 로그인 성공 시 상태 변경\n//   };\n\n//   const handleInfoComplete = () => {\n//     setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 변경\n//   };\n\n//   return (\n//     <Router>\n//       <div style={{ paddingBottom: \"80px\" }}>\n//         <Routes>\n//           {/* 초기 화면: LoginPage */}\n//           <Route\n//             path=\"/\"\n//             element={\n//               isAuthenticated ? (\n//                 isInfoComplete ? (\n//                   <Navigate to=\"/nutrition\" />\n//                 ) : (\n//                   <Navigate to=\"/userinfo\" />\n//                 )\n//               ) : (\n//                 <LoginPage onLoginSuccess={handleLoginSuccess} />\n//               )\n//             }\n\n//           />\n//           <Route path=\"/userinfo\" element={<UserInfoPage onComplete={handleInfoComplete} />} />\n//           <Route path=\"/nutrition\" element={<NutritionPage />} />\n//           <Route path=\"/habit\" element={<div>습관 페이지 준비중...</div>} />\n//           <Route path=\"/mypage\" element={<MyPage />} />\n//           <Route path=\"/settings\" element={<Settings />} />\n//           <Route path=\"/guide\" element={<Guide />} />\n//           <Route path=\"/settings/edit-profile\" element={<UserInfoPage />} />\n//           <Route path=\"/settings/notifications\" element={<Notifications />} />\n//           <Route path=\"/settings/privacy-policy\" element={<PrivacyPolicy />} />\n//         </Routes>\n//         {isAuthenticated && <NavigationBar />} {/* 로그인 후에만 네비게이션 바 표시 */}\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserInfoPage from \"./pages/UserInfoPage\";\nimport NutritionPage from \"./pages/NutritionPage\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n  const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n  const handleLoginSuccess = () => {\n    setIsAuthenticated(true); // 로그인 성공 시 상태 업데이트\n  };\n  const handleInfoComplete = () => {\n    setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 업데이트\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: \"80px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: isAuthenticated ? isInfoComplete ? /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/nutrition\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/userinfo\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLoginSuccess: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/userinfo\",\n          element: isAuthenticated ? /*#__PURE__*/_jsxDEV(UserInfoPage, {\n            onComplete: handleInfoComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/nutrition\",\n          element: isInfoComplete ? /*#__PURE__*/_jsxDEV(NutritionPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/userinfo\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"I5BW9oeeVaO7Ub3upGfahi/OKLw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","LoginPage","UserInfoPage","NutritionPage","NavigationBar","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","isInfoComplete","setIsInfoComplete","handleLoginSuccess","handleInfoComplete","children","style","paddingBottom","path","element","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","onLoginSuccess","onComplete","_c","$RefreshReg$"],"sources":["/Users/chooiseok/Documents/GitHub/Frontend-hab-eat/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n// import UserInfoPage from './pages/UserInfoPage';\n// import NutritionPage from './pages/NutritionPage';\n// import NavigationBar from './components/NavigationBar';\n// import MyPage from './pages/MyPage';\n// import Settings from './pages/Settings';\n// import Guide from './pages/Guide';\n// import Notifications from './pages/Notifications';\n// import PrivacyPolicy from './pages/PrivacyPolicy';\n\n// const App = () => {\n//   const [isInfoComplete, setIsInfoComplete] = useState(false);\n\n//   const handleInfoComplete = () => {\n//     setIsInfoComplete(true);\n//   };\n\n//   return (\n//     <Router>\n//       <div style={{ paddingBottom: '80px' }}> {/* 네비게이션 바 높이만큼 여백 추가 */}\n//         <Routes>\n//           <Route\n//             path=\"/\"\n            // element={\n            //   isInfoComplete ? (\n            //     <Navigate to=\"nutrition\" />\n            //   ) : (\n                // <UserInfoPage onComplete={handleInfoComplete} />\n//               )\n//             }\n//           />\n//           <Route path=\"/nutrition\" element={<NutritionPage />} />\n//           <Route path=\"/habit\" element={<div>습관 페이지 준비중...</div>} />\n//           <Route path=\"/mypage\" element={<MyPage />} />\n//           <Route path=\"/settings\" element={<Settings />} />\n//           <Route path=\"/guide\" element={<Guide />} />\n//           <Route path=\"/settings/edit-profile\" element={<UserInfoPage />} />\n//           <Route path=\"/settings/notifications\" element={<Notifications />} />\n//           <Route path=\"/settings/privacy-policy\" element={<PrivacyPolicy />} />\n//         </Routes>\n//         <NavigationBar /> {/* 네비게이션 바 추가 */}\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState } from \"react\";\n// import { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\n// import LoginPage from \"./pages/LoginPage\";\n// import UserInfoPage from \"./pages/UserInfoPage\";\n// import NutritionPage from \"./pages/NutritionPage\";\n// import NavigationBar from \"./components/NavigationBar\";\n// import MyPage from \"./pages/MyPage\";\n// import Settings from \"./pages/Settings\";\n// import Guide from \"./pages/Guide\";\n// import Notifications from \"./pages/Notifications\";\n// import PrivacyPolicy from \"./pages/PrivacyPolicy\";\n\n// const App = () => {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n//   const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n//   const handleLoginSuccess = () => {\n//     setIsAuthenticated(true); // 로그인 성공 시 상태 변경\n//   };\n\n//   const handleInfoComplete = () => {\n//     setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 변경\n//   };\n\n//   return (\n//     <Router>\n//       <div style={{ paddingBottom: \"80px\" }}>\n//         <Routes>\n//           {/* 초기 화면: LoginPage */}\n//           <Route\n//             path=\"/\"\n//             element={\n//               isAuthenticated ? (\n//                 isInfoComplete ? (\n//                   <Navigate to=\"/nutrition\" />\n//                 ) : (\n//                   <Navigate to=\"/userinfo\" />\n//                 )\n//               ) : (\n//                 <LoginPage onLoginSuccess={handleLoginSuccess} />\n//               )\n//             }\n              \n            \n//           />\n//           <Route path=\"/userinfo\" element={<UserInfoPage onComplete={handleInfoComplete} />} />\n//           <Route path=\"/nutrition\" element={<NutritionPage />} />\n//           <Route path=\"/habit\" element={<div>습관 페이지 준비중...</div>} />\n//           <Route path=\"/mypage\" element={<MyPage />} />\n//           <Route path=\"/settings\" element={<Settings />} />\n//           <Route path=\"/guide\" element={<Guide />} />\n//           <Route path=\"/settings/edit-profile\" element={<UserInfoPage />} />\n//           <Route path=\"/settings/notifications\" element={<Notifications />} />\n//           <Route path=\"/settings/privacy-policy\" element={<PrivacyPolicy />} />\n//         </Routes>\n//         {isAuthenticated && <NavigationBar />} {/* 로그인 후에만 네비게이션 바 표시 */}\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserInfoPage from \"./pages/UserInfoPage\";\nimport NutritionPage from \"./pages/NutritionPage\";\nimport NavigationBar from \"./components/NavigationBar\";\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n  const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n  const handleLoginSuccess = () => {\n    setIsAuthenticated(true); // 로그인 성공 시 상태 업데이트\n  };\n\n  const handleInfoComplete = () => {\n    setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 업데이트\n  };\n\n  return (\n    <Router>\n      <div style={{ paddingBottom: \"80px\" }}>\n        <Routes>\n          {/* 초기 화면: LoginPage */}\n          <Route\n            path=\"/\"\n            element={\n              isAuthenticated ? (\n                isInfoComplete ? (\n                  <Navigate to=\"/nutrition\" replace />\n                ) : (\n                  <Navigate to=\"/userinfo\" replace />\n                )\n              ) : (\n                <LoginPage onLoginSuccess={handleLoginSuccess} />\n              )\n            }\n          />\n          <Route\n            path=\"/userinfo\"\n            element={\n              isAuthenticated ? (\n                <UserInfoPage onComplete={handleInfoComplete} />\n              ) : (\n                <Navigate to=\"/\" replace />\n              )\n            }\n          />\n          <Route\n            path=\"/nutrition\"\n            element={\n              isInfoComplete ? (\n                <NutritionPage />\n              ) : (\n                <Navigate to=\"/userinfo\" replace />\n              )\n            }\n          />\n        </Routes>\n        {isAuthenticated && <NavigationBar />} {/* 로그인 후에만 네비게이션 바 표시 */}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}