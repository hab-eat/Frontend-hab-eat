{"ast":null,"code":"var _jsxFileName = \"/Users/chooiseok/Documents/GitHub/Frontend-hab-eat/src/pages/LoginPage.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './LoginPage.css';\n// import KakaoLogin from 'react-kakao-login';\n// import NaverLogin from 'react-naver-login';\n\n// // 환경 변수에서 키 가져오기\n// const KAKAO_JAVASCRIPT_KEY = process.env.REACT_APP_KAKAO_JAVASCRIPT_KEY;\n// const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID;\n// const NAVER_CALLBACK_URL = process.env.REACT_APP_NAVER_CALLBACK_URL;\n// const KAKAO_CALLBACK_URL = process.env.REACT_APP_KAKAO_REDIRECT_URL;\n\n// const LoginPage = () => {\n//   const handleKakaoSuccess = (response) => {\n//     console.log('카카오 로그인 성공:', response);\n//     alert(`카카오 로그인 성공!`);\n//   };\n\n//   const handleKakaoFailure = (error) => {\n//     console.error('카카오 로그인 실패:', error);\n//     alert('카카오 로그인에 실패했습니다.');\n//   };\n\n//   const handleNaverSuccess = (response) => {\n//     console.log('네이버 로그인 성공:', response);\n//     alert('네이버 로그인 성공! 정보를 확인해주세요.');\n//   };\n\n//   const handleNaverFailure = (error) => {\n//     console.error('네이버 로그인 실패:', error);\n//     alert('네이버 로그인에 실패했습니다.');\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         {/* 네이버 로그인 버튼 */}\n//         <NaverLogin\n//           clientId={NAVER_CLIENT_ID} // .env에서 가져온 네이버 클라이언트 ID\n//           callbackUrl={NAVER_CALLBACK_URL} // .env에서 가져온 네이버 Redirect URL\n//           onSuccess={handleNaverSuccess}\n//           onFailure={handleNaverFailure}\n//           render={(props) => (\n//             <button className=\"login-button naver\" onClick={props.onClick}>\n//               네이버로 시작하기\n//             </button>\n//           )}\n//         />\n\n//         {/* 카카오 로그인 버튼 */}\n//         <KakaoLogin\n//           token={KAKAO_JAVASCRIPT_KEY} // .env에서 가져온 카카오 JavaScript 키\n//           onSuccess={handleKakaoSuccess}\n//           onFail={handleKakaoFailure}\n//           onLogout={() => console.log('카카오 로그아웃')}\n//           render={(props) => (\n//             <button className=\"login-button kakao\" onClick={props.onClick}>\n//               카카오로 시작하기\n//             </button>\n//           )}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n// import React from 'react';\n// import './LoginPage.css';\n\n// const LoginPage = () => {\n//   const redirectUri = 'http://localhost:3000/userinfo'; // 카카오 개발자 콘솔에 등록된 Redirect URI\n//   const clientId = \"637f367d53c0975652e7451e73b761d3\"; // 카카오 REST API 키\n//   const kakaoAuthUrl = `https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n//   const handleKakaoLogin = () => {\n//     window.location.href = kakaoAuthUrl; // 카카오 인증 페이지로 리다이렉트\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         <button className=\"login-button kakao\" onClick={handleKakaoLogin}>\n//           카카오로 시작하기\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React from 'react';\n// import './LoginPage.css';\n\n// const LoginPage = ({ onLoginSuccess }) => {\n//   const redirectUri = 'http://localhost:3000/userinfo'; // 카카오 개발자 콘솔에 등록된 Redirect URI\n//   const clientId = \"637f367d53c0975652e7451e73b761d3\"; // 카카오 REST API 키\n//   const kakaoAuthUrl = `https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n//   const handleKakaoLogin = () => {\n//     // 로그인 성공 후 onLoginSuccess 호출\n//     onLoginSuccess(); // 로그인 상태를 App.js에 전달\n//     window.location.href = kakaoAuthUrl; // 카카오 인증 페이지로 리다이렉트\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         <button className=\"login-button kakao\" onClick={handleKakaoLogin}>\n//           카카오로 시작하기\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserInfoPage from \"./pages/UserInfoPage\";\nimport NutritionPage from \"./pages/NutritionPage\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n  const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n  const handleLoginSuccess = () => {\n    console.log(\"handleLoginSuccess called: Login successful\"); // 로그인 성공 시 호출 확인\n    setIsAuthenticated(true); // 로그인 성공 시 상태 변경\n  };\n  const handleInfoComplete = () => {\n    console.log(\"handleInfoComplete called: User info complete\"); // 유저 정보 입력 완료 시 호출 확인\n    setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 변경\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: \"80px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: isAuthenticated ? isInfoComplete ? /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/nutrition\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/userinfo\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLoginSuccess: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/userinfo\",\n          element: isAuthenticated ? /*#__PURE__*/_jsxDEV(UserInfoPage, {\n            onComplete: handleInfoComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/nutrition\",\n          element: isInfoComplete ? /*#__PURE__*/_jsxDEV(NutritionPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/userinfo\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 29\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"I5BW9oeeVaO7Ub3upGfahi/OKLw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","LoginPage","UserInfoPage","NutritionPage","NavigationBar","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","isInfoComplete","setIsInfoComplete","handleLoginSuccess","console","log","handleInfoComplete","children","style","paddingBottom","path","element","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","onLoginSuccess","onComplete","_c","$RefreshReg$"],"sources":["/Users/chooiseok/Documents/GitHub/Frontend-hab-eat/src/pages/LoginPage.js"],"sourcesContent":["// import React from 'react';\n// import './LoginPage.css';\n// import KakaoLogin from 'react-kakao-login';\n// import NaverLogin from 'react-naver-login';\n\n// // 환경 변수에서 키 가져오기\n// const KAKAO_JAVASCRIPT_KEY = process.env.REACT_APP_KAKAO_JAVASCRIPT_KEY;\n// const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_CLIENT_ID;\n// const NAVER_CALLBACK_URL = process.env.REACT_APP_NAVER_CALLBACK_URL;\n// const KAKAO_CALLBACK_URL = process.env.REACT_APP_KAKAO_REDIRECT_URL;\n\n// const LoginPage = () => {\n//   const handleKakaoSuccess = (response) => {\n//     console.log('카카오 로그인 성공:', response);\n//     alert(`카카오 로그인 성공!`);\n//   };\n\n//   const handleKakaoFailure = (error) => {\n//     console.error('카카오 로그인 실패:', error);\n//     alert('카카오 로그인에 실패했습니다.');\n//   };\n\n//   const handleNaverSuccess = (response) => {\n//     console.log('네이버 로그인 성공:', response);\n//     alert('네이버 로그인 성공! 정보를 확인해주세요.');\n//   };\n\n//   const handleNaverFailure = (error) => {\n//     console.error('네이버 로그인 실패:', error);\n//     alert('네이버 로그인에 실패했습니다.');\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         {/* 네이버 로그인 버튼 */}\n//         <NaverLogin\n//           clientId={NAVER_CLIENT_ID} // .env에서 가져온 네이버 클라이언트 ID\n//           callbackUrl={NAVER_CALLBACK_URL} // .env에서 가져온 네이버 Redirect URL\n//           onSuccess={handleNaverSuccess}\n//           onFailure={handleNaverFailure}\n//           render={(props) => (\n//             <button className=\"login-button naver\" onClick={props.onClick}>\n//               네이버로 시작하기\n//             </button>\n//           )}\n//         />\n\n//         {/* 카카오 로그인 버튼 */}\n//         <KakaoLogin\n//           token={KAKAO_JAVASCRIPT_KEY} // .env에서 가져온 카카오 JavaScript 키\n//           onSuccess={handleKakaoSuccess}\n//           onFail={handleKakaoFailure}\n//           onLogout={() => console.log('카카오 로그아웃')}\n//           render={(props) => (\n//             <button className=\"login-button kakao\" onClick={props.onClick}>\n//               카카오로 시작하기\n//             </button>\n//           )}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n// import React from 'react';\n// import './LoginPage.css';\n\n// const LoginPage = () => {\n//   const redirectUri = 'http://localhost:3000/userinfo'; // 카카오 개발자 콘솔에 등록된 Redirect URI\n//   const clientId = \"637f367d53c0975652e7451e73b761d3\"; // 카카오 REST API 키\n//   const kakaoAuthUrl = `https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n//   const handleKakaoLogin = () => {\n//     window.location.href = kakaoAuthUrl; // 카카오 인증 페이지로 리다이렉트\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         <button className=\"login-button kakao\" onClick={handleKakaoLogin}>\n//           카카오로 시작하기\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\n\n// import React from 'react';\n// import './LoginPage.css';\n\n// const LoginPage = ({ onLoginSuccess }) => {\n//   const redirectUri = 'http://localhost:3000/userinfo'; // 카카오 개발자 콘솔에 등록된 Redirect URI\n//   const clientId = \"637f367d53c0975652e7451e73b761d3\"; // 카카오 REST API 키\n//   const kakaoAuthUrl = `https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}`;\n\n//   const handleKakaoLogin = () => {\n//     // 로그인 성공 후 onLoginSuccess 호출\n//     onLoginSuccess(); // 로그인 상태를 App.js에 전달\n//     window.location.href = kakaoAuthUrl; // 카카오 인증 페이지로 리다이렉트\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h1 className=\"title\">한 손에 들고 먹는 건강한 습관</h1>\n//       <img\n//         src=\"./Hab-eat.png\" // 로고 이미지 경로 (public 폴더에 추가)\n//         alt=\"App Logo\"\n//         className=\"logo\"\n//       />\n//       <p className=\"subtitle\">여러분의 식단, 같이 찍어봐요!</p>\n//       <div className=\"button-container\">\n//         <button className=\"login-button kakao\" onClick={handleKakaoLogin}>\n//           카카오로 시작하기\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport UserInfoPage from \"./pages/UserInfoPage\";\nimport NutritionPage from \"./pages/NutritionPage\";\nimport NavigationBar from \"./components/NavigationBar\";\n\nconst App = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // 로그인 여부 상태\n  const [isInfoComplete, setIsInfoComplete] = useState(false); // 유저 정보 입력 여부 상태\n\n  const handleLoginSuccess = () => {\n    console.log(\"handleLoginSuccess called: Login successful\"); // 로그인 성공 시 호출 확인\n    setIsAuthenticated(true); // 로그인 성공 시 상태 변경\n  };\n\n  const handleInfoComplete = () => {\n    console.log(\"handleInfoComplete called: User info complete\"); // 유저 정보 입력 완료 시 호출 확인\n    setIsInfoComplete(true); // 유저 정보 입력 완료 시 상태 변경\n  };\n\n  return (\n    <Router>\n      <div style={{ paddingBottom: \"80px\" }}>\n        <Routes>\n          {/* 초기 화면: LoginPage */}\n          <Route\n            path=\"/\"\n            element={\n              isAuthenticated ? (\n                isInfoComplete ? (\n                  <Navigate to=\"/nutrition\" replace />\n                ) : (\n                  <Navigate to=\"/userinfo\" replace />\n                )\n              ) : (\n                <LoginPage onLoginSuccess={handleLoginSuccess} />\n              )\n            }\n          />\n          <Route\n            path=\"/userinfo\"\n            element={\n              isAuthenticated ? (\n                <UserInfoPage onComplete={handleInfoComplete} />\n              ) : (\n                <Navigate to=\"/\" replace />\n              )\n            }\n          />\n          <Route\n            path=\"/nutrition\"\n            element={\n              isInfoComplete ? (\n                <NutritionPage />\n              ) : (\n                <Navigate to=\"/userinfo\" replace />\n              )\n            }\n          />\n        </Routes>\n        {isAuthenticated && <NavigationBar />} {/* 로그인 후에만 네비게이션 바 표시 */}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}