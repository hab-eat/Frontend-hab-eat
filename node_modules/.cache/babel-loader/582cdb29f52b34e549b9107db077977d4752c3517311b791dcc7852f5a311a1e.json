{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\32223759\\\\Desktop\\\\Habit\\\\Frontend-hab-eat\\\\src\\\\pages\\\\ChallengePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Calendar from 'react-calendar';\nimport styled from 'styled-components';\nimport 'react-calendar/dist/Calendar.css';\nimport habitIcon from \"../img/habit-icon.svg\";\nimport back from \"../img/back.svg\";\nimport './ChallengePage.css';\nimport left from \"../img/left.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCalendar = styled(Calendar)`\n  width: 100%; /* 캘린더를 부모 요소의 너비에 맞게 설정 */\n  max-width: 600px; /* 캘린더의 최대 너비를 제한 */\n  height: 100%; /* 캘린더 높이 비율 */\n  min-height: 500px; /* 최소 높이 설정 */\n//   padding: 20px; /* 내부 여백 */\n  height: 150%;\n  margin: 0 auto; /* 중앙 정렬 */\n  // border: 1.5px solid #00C5A1;\n  // border-radius: 2%;\n  // border: none; /* 기본 테두리 제거 */\n//   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* 그림자 추가 (선택 사항) */\n\n.react-calendar {\n    border: none;\n    border-radius: 0 0 10px 10px; \n  }\n\n  .react-calendar__tile {\n    background-color: #fdfdfd;\n    color: #8E8E8E;\n    height: 70px; /* 타일의 높이를 늘림 */\n    position: relative; /* 아이콘을 위해 상대 위치 설정 */\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  .react-calendar__month-view__days__day {\n    height: 70px; /* 일별 셀 높이 */\n  }\n\n  .react-calendar__tile--highlight {\n    background-color: #c5f5d1; /* 주간 챌린지 달성 하이라이트 */\n  }\n\n  .react-calendar__navigation {\n    display: flex; /* flex를 제거하고 버튼 크기 고정 */\n    background-color: #00C5A1;\n    color: white;\n  }\n\n  .tile-icon {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    font-size: 14px;\n    color: #00C5A1;\n  }\n\n  .react-calendar__tile--now {\n    background-color:  #00C5A1;\n    font-weight: bold;\n    color: #fdfdfd;\n  }\n\n  .react-calendar__tile--active {\n    // background-color: #00C5A1;\n    color: white;\n  }\n\n  .react-calendar__navigation__label {\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n  }\n\n  button {\n    width: auto;\n    // min-width: 70px;\n  }\n\n  .react-calendar__navigation__arrow {\n    background-color: transparent;\n    border: none;\n    color: white;\n  }\n`;\n_c = StyledCalendar;\nconst ChallengePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [date, setDate] = React.useState(new Date());\n\n  // 예제: 각 날짜의 챌린지 달성 여부 데이터\n  const dailyChallenges = {\n    '2024-12-01': true,\n    '2024-12-02': true,\n    '2024-12-03': false,\n    '2024-12-04': true,\n    '2024-12-05': true,\n    '2024-12-06': true,\n    '2024-12-07': false,\n    '2024-12-08': true,\n    '2024-12-19': true\n  };\n  const handleDateChange = newDate => {\n    setDate(newDate);\n  };\n  const formatDateToKey = date => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n  };\n  const isWeeklyChallengeCompleted = date => {\n    const startOfWeek = new Date(date);\n    const dayOfWeek = startOfWeek.getDay(); // 현재 요일(0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 일요일(0)이면 -6, 나머지는 1 - dayOfWeek\n\n    startOfWeek.setDate(startOfWeek.getDate() + daysToMonday); // 월요일로 설정\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 해당 주의 일요일\n\n    let completedDays = 0;\n    for (let d = new Date(startOfWeek); d <= endOfWeek; d.setDate(d.getDate() + 1)) {\n      const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\n      if (dailyChallenges[dateKey]) {\n        completedDays += 1;\n      }\n    }\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\n  };\n\n  // 각 날짜의 스타일 결정\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\n      // console.log(date);\n      return 'react-calendar__tile--highlight';\n    }\n    return '';\n  };\n\n  // 각 날짜에 아이콘 추가\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view === 'month') {\n      //   const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n      const dateKey = formatDateToKey(date); // 로컬 시간을 기반으로 날짜를 생성\n      //   console.log(dateKey);\n      if (dailyChallenges[dateKey]) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: habitIcon // 성공한 날짜에 habitIcon 사용\n          ,\n          alt: \"\\uCC4C\\uB9B0\\uC9C0 \\uB2EC\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 16\n        }, this); // 달성 아이콘\n      }\n      //   return <span className=\"tile-icon\">✖</span>; // 미달성 아이콘\n    }\n    return null;\n  };\n  const handleDayFormat = (locale, date) => {\n    return date.getDate(); // 날짜만 반환\n  };\n  const [activeStartDate, setActiveStartDate] = useState(new Date()); // 활성화된 날짜\n\n  // 이전 달로 이동\n  const handlePrevMonth = () => {\n    const prevMonth = new Date(activeStartDate);\n    prevMonth.setMonth(activeStartDate.getMonth() - 1);\n    setActiveStartDate(prevMonth);\n  };\n\n  // 다음 달로 이동\n  const handleNextMonth = () => {\n    const nextMonth = new Date(activeStartDate);\n    nextMonth.setMonth(activeStartDate.getMonth() + 1);\n    setActiveStartDate(nextMonth);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"challengePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"\\uCC4C\\uB9B0\\uC9C0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"month\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handlePrevMonth,\n              className: \"nav-button\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: left\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 72\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"month-label\",\n              children: [activeStartDate.getMonth() + 1, \"\\uC6D4\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleNextMonth,\n              className: \"nav-button\",\n              children: \">\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"camera-button\",\n            children: \"\\uD83D\\uDCF7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledCalendar, {\n          activeStartDate: activeStartDate // 활성화된 시작 날짜\n          ,\n          onActiveStartDateChange: ({\n            activeStartDate\n          }) => setActiveStartDate(activeStartDate),\n          onChange: handleDateChange,\n          value: date,\n          tileContent: tileContent // 날짜별 아이콘 표시\n          ,\n          tileClassName: tileClassName // 주간 달성 여부 하이라이트\n          ,\n          formatDay: handleDayFormat // 날짜 포맷 수정\n          ,\n          showNavigation: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(ChallengePage, \"COew6KI71Fit96v6EIpfuI8k958=\", false, function () {\n  return [useNavigate];\n});\n_c2 = ChallengePage;\nexport default ChallengePage;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCalendar\");\n$RefreshReg$(_c2, \"ChallengePage\");","map":{"version":3,"names":["React","useState","useNavigate","Calendar","styled","habitIcon","back","left","jsxDEV","_jsxDEV","StyledCalendar","_c","ChallengePage","_s","navigate","date","setDate","Date","dailyChallenges","handleDateChange","newDate","formatDateToKey","getFullYear","String","getMonth","padStart","getDate","isWeeklyChallengeCompleted","startOfWeek","dayOfWeek","getDay","daysToMonday","endOfWeek","completedDays","d","dateKey","tileClassName","view","tileContent","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","handleDayFormat","locale","activeStartDate","setActiveStartDate","handlePrevMonth","prevMonth","setMonth","handleNextMonth","nextMonth","className","children","onClick","onActiveStartDateChange","onChange","value","formatDay","showNavigation","_c2","$RefreshReg$"],"sources":["C:/Users/32223759/Desktop/Habit/Frontend-hab-eat/src/pages/ChallengePage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Calendar from 'react-calendar';\r\nimport styled from 'styled-components';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport habitIcon from \"../img/habit-icon.svg\";\r\nimport back from \"../img/back.svg\";\r\nimport './ChallengePage.css'\r\nimport left from \"../img/left.svg\";\r\n\r\nconst StyledCalendar = styled(Calendar)`\r\n  width: 100%; /* 캘린더를 부모 요소의 너비에 맞게 설정 */\r\n  max-width: 600px; /* 캘린더의 최대 너비를 제한 */\r\n  height: 100%; /* 캘린더 높이 비율 */\r\n  min-height: 500px; /* 최소 높이 설정 */\r\n//   padding: 20px; /* 내부 여백 */\r\n  height: 150%;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n  // border: 1.5px solid #00C5A1;\r\n  // border-radius: 2%;\r\n  // border: none; /* 기본 테두리 제거 */\r\n//   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* 그림자 추가 (선택 사항) */\r\n\r\n.react-calendar {\r\n    border: none;\r\n    border-radius: 0 0 10px 10px; \r\n  }\r\n\r\n  .react-calendar__tile {\r\n    background-color: #fdfdfd;\r\n    color: #8E8E8E;\r\n    height: 70px; /* 타일의 높이를 늘림 */\r\n    position: relative; /* 아이콘을 위해 상대 위치 설정 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .react-calendar__month-view__days__day {\r\n    height: 70px; /* 일별 셀 높이 */\r\n  }\r\n\r\n  .react-calendar__tile--highlight {\r\n    background-color: #c5f5d1; /* 주간 챌린지 달성 하이라이트 */\r\n  }\r\n\r\n  .react-calendar__navigation {\r\n    display: flex; /* flex를 제거하고 버튼 크기 고정 */\r\n    background-color: #00C5A1;\r\n    color: white;\r\n  }\r\n\r\n  .tile-icon {\r\n    position: absolute;\r\n    bottom: 5px;\r\n    right: 5px;\r\n    font-size: 14px;\r\n    color: #00C5A1;\r\n  }\r\n\r\n  .react-calendar__tile--now {\r\n    background-color:  #00C5A1;\r\n    font-weight: bold;\r\n    color: #fdfdfd;\r\n  }\r\n\r\n  .react-calendar__tile--active {\r\n    // background-color: #00C5A1;\r\n    color: white;\r\n  }\r\n\r\n  .react-calendar__navigation__label {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    color: white;\r\n  }\r\n\r\n  button {\r\n    width: auto;\r\n    // min-width: 70px;\r\n  }\r\n\r\n  .react-calendar__navigation__arrow {\r\n    background-color: transparent;\r\n    border: none;\r\n    color: white;\r\n  }\r\n`;\r\n\r\n\r\nconst ChallengePage = () => {\r\n    const navigate = useNavigate();\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  // 예제: 각 날짜의 챌린지 달성 여부 데이터\r\n  const dailyChallenges = {\r\n    '2024-12-01': true,\r\n    '2024-12-02': true,\r\n    '2024-12-03': false,\r\n    '2024-12-04': true,\r\n    '2024-12-05': true,\r\n    '2024-12-06': true,\r\n    '2024-12-07': false,\r\n    '2024-12-08': true,\r\n    '2024-12-19': true,\r\n  };\r\n\r\n  const handleDateChange = (newDate) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  const formatDateToKey = (date) => {\r\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n  };\r\n\r\n  const isWeeklyChallengeCompleted = (date) => {\r\n    const startOfWeek = new Date(date);\r\n    const dayOfWeek = startOfWeek.getDay(); // 현재 요일(0: 일요일, 1: 월요일, ..., 6: 토요일)\r\n    const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 일요일(0)이면 -6, 나머지는 1 - dayOfWeek\r\n  \r\n    startOfWeek.setDate(startOfWeek.getDate() + daysToMonday); // 월요일로 설정\r\n  \r\n    const endOfWeek = new Date(startOfWeek);\r\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 해당 주의 일요일\r\n  \r\n    let completedDays = 0;\r\n    for (\r\n      let d = new Date(startOfWeek);\r\n      d <= endOfWeek;\r\n      d.setDate(d.getDate() + 1)\r\n    ) {\r\n      const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\r\n      if (dailyChallenges[dateKey]) {\r\n        completedDays += 1;\r\n      }\r\n    }\r\n  \r\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\r\n  };\r\n  \r\n\r\n  // 각 날짜의 스타일 결정\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\r\n        // console.log(date);\r\n      return 'react-calendar__tile--highlight';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  // 각 날짜에 아이콘 추가\r\n  const tileContent = ({ date, view }) => {\r\n    if (view === 'month') {\r\n    //   const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    const dateKey = formatDateToKey(date); // 로컬 시간을 기반으로 날짜를 생성\r\n    //   console.log(dateKey);\r\n      if (dailyChallenges[dateKey]) {\r\n        return <img\r\n        src={habitIcon} // 성공한 날짜에 habitIcon 사용\r\n        alt=\"챌린지 달성\"\r\n      />; // 달성 아이콘\r\n      }\r\n    //   return <span className=\"tile-icon\">✖</span>; // 미달성 아이콘\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleDayFormat = (locale, date) => {\r\n    return date.getDate(); // 날짜만 반환\r\n  };\r\n\r\n  const [activeStartDate, setActiveStartDate] = useState(new Date()); // 활성화된 날짜\r\n\r\n  // 이전 달로 이동\r\n  const handlePrevMonth = () => {\r\n    const prevMonth = new Date(activeStartDate);\r\n    prevMonth.setMonth(activeStartDate.getMonth() - 1);\r\n    setActiveStartDate(prevMonth);\r\n  };\r\n\r\n  // 다음 달로 이동\r\n  const handleNextMonth = () => {\r\n    const nextMonth = new Date(activeStartDate);\r\n    nextMonth.setMonth(activeStartDate.getMonth() + 1);\r\n    setActiveStartDate(nextMonth);\r\n  };\r\n\r\n  return (\r\n    <div className='challengePage'>\r\n      <div className='top'>\r\n        {/* <img\r\n                className=\"settings-back-icon\"\r\n                alt=\"Back\"\r\n                src={back}\r\n                onClick={() => navigate(-1)} // 뒤로가기\r\n              /> */}\r\n        <h1 className='title'>챌린지</h1>\r\n      </div>\r\n      <div className=\"App\">\r\n        <div className='manage'>\r\n          {/* <div className=\"settings-header\">\r\n            <img\r\n              className=\"settings-back-icon\"\r\n              alt=\"Back\"\r\n              src={back}\r\n              onClick={() => navigate(-1)} // 뒤로가기\r\n            />\r\n            <span className=\"settings-title\"></span>\r\n          </div>\r\n          <h1>챌린지 관리</h1> */}\r\n            {/* 커스텀 네비게이션 */}\r\n          <div className=\"custom-header\">\r\n            <div className='month'>\r\n              <button onClick={handlePrevMonth} className=\"nav-button\"><img src={left}></img></button>\r\n              <span className=\"month-label\">{activeStartDate.getMonth() + 1}월</span>\r\n              <button onClick={handleNextMonth} className=\"nav-button\">&gt;</button>\r\n            </div>\r\n            <button className=\"camera-button\">📷</button> {/* 카메라 버튼 */}\r\n          </div>\r\n          <StyledCalendar\r\n            activeStartDate={activeStartDate} // 활성화된 시작 날짜\r\n            onActiveStartDateChange={({ activeStartDate }) => setActiveStartDate(activeStartDate)}\r\n            onChange={handleDateChange}\r\n            value={date}\r\n            tileContent={tileContent} // 날짜별 아이콘 표시\r\n            tileClassName={tileClassName} // 주간 달성 여부 하이라이트\r\n            formatDay={handleDayFormat} // 날짜 포맷 수정\r\n            showNavigation={false}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}