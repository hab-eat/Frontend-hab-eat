{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\32223759\\\\Desktop\\\\Habit\\\\Frontend-hab-eat\\\\src\\\\pages\\\\ChallengePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport styled from 'styled-components';\nimport 'react-calendar/dist/Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCalendar = styled(Calendar)`\n  .current-month {\n    color: #00C5A1; /* 선택된 달에 속한 날짜의 색상 */\n    font-weight: bold;\n  }\n\n  .other-month {\n    color: #ccc; /* 선택된 달 외의 날짜 색상 */\n  }\n`;\n_c = StyledCalendar;\nconst ChallengePage = () => {\n  _s();\n  const [date, setDate] = useState(new Date()); // 현재 선택된 날짜\n\n  const handleDateChange = newDate => {\n    setDate(newDate); // 선택된 날짜 업데이트\n  };\n  const tileClassName = ({\n    date: tileDate,\n    view\n  }) => {\n    if (view === 'month') {\n      const selectedMonth = new Date(date).getMonth(); // 네비게이터에서 선택된 달\n      const selectedYear = new Date(date).getFullYear(); // 네비게이터에서 선택된 연도\n\n      // 타일의 날짜가 선택된 달과 연도에 속하는 경우\n      if (tileDate.getMonth() === selectedMonth && tileDate.getFullYear() === selectedYear) {\n        return 'current-month';\n      } else {\n        return 'other-month';\n      }\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCC4C\\uB9B0\\uC9C0 \\uAD00\\uB9AC \\uD398\\uC774\\uC9C0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledCalendar, {\n      onChange: handleDateChange // 날짜를 선택했을 때 호출\n      ,\n      value: date // 네비게이터에서 선택된 날짜\n      ,\n      tileClassName: tileClassName // 타일 스타일링\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ChallengePage, \"rW+rxy2mJ1oFEB1Cqg4Z2uVJym0=\");\n_c2 = ChallengePage;\nexport default ChallengePage;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCalendar\");\n$RefreshReg$(_c2, \"ChallengePage\");","map":{"version":3,"names":["React","useState","Calendar","styled","jsxDEV","_jsxDEV","StyledCalendar","_c","ChallengePage","_s","date","setDate","Date","handleDateChange","newDate","tileClassName","tileDate","view","selectedMonth","getMonth","selectedYear","getFullYear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","_c2","$RefreshReg$"],"sources":["C:/Users/32223759/Desktop/Habit/Frontend-hab-eat/src/pages/ChallengePage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport styled from 'styled-components';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nconst StyledCalendar = styled(Calendar)`\r\n  .current-month {\r\n    color: #00C5A1; /* 선택된 달에 속한 날짜의 색상 */\r\n    font-weight: bold;\r\n  }\r\n\r\n  .other-month {\r\n    color: #ccc; /* 선택된 달 외의 날짜 색상 */\r\n  }\r\n`;\r\n\r\nconst ChallengePage = () => {\r\n  const [date, setDate] = useState(new Date()); // 현재 선택된 날짜\r\n\r\n  const handleDateChange = (newDate) => {\r\n    setDate(newDate); // 선택된 날짜 업데이트\r\n  };\r\n\r\n  const tileClassName = ({ date: tileDate, view }) => {\r\n    if (view === 'month') {\r\n      const selectedMonth = new Date(date).getMonth(); // 네비게이터에서 선택된 달\r\n      const selectedYear = new Date(date).getFullYear(); // 네비게이터에서 선택된 연도\r\n\r\n      // 타일의 날짜가 선택된 달과 연도에 속하는 경우\r\n      if (tileDate.getMonth() === selectedMonth && tileDate.getFullYear() === selectedYear) {\r\n        return 'current-month';\r\n      } else {\r\n        return 'other-month';\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>챌린지 관리 페이지</h1>\r\n      <StyledCalendar\r\n        onChange={handleDateChange} // 날짜를 선택했을 때 호출\r\n        value={date} // 네비게이터에서 선택된 날짜\r\n        tileClassName={tileClassName} // 타일 스타일링\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGH,MAAM,CAACD,QAAQ,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,EAAA,GATID,cAAc;AAWpB,MAAME,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAIW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9C,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;IACpCH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAC;IAAEL,IAAI,EAAEM,QAAQ;IAAEC;EAAK,CAAC,KAAK;IAClD,IAAIA,IAAI,KAAK,OAAO,EAAE;MACpB,MAAMC,aAAa,GAAG,IAAIN,IAAI,CAACF,IAAI,CAAC,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjD,MAAMC,YAAY,GAAG,IAAIR,IAAI,CAACF,IAAI,CAAC,CAACW,WAAW,CAAC,CAAC,CAAC,CAAC;;MAEnD;MACA,IAAIL,QAAQ,CAACG,QAAQ,CAAC,CAAC,KAAKD,aAAa,IAAIF,QAAQ,CAACK,WAAW,CAAC,CAAC,KAAKD,YAAY,EAAE;QACpF,OAAO,eAAe;MACxB,CAAC,MAAM;QACL,OAAO,aAAa;MACtB;IACF;IACA,OAAO,EAAE;EACX,CAAC;EAED,oBACEf,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlB,OAAA;MAAAkB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBtB,OAAA,CAACC,cAAc;MACbsB,QAAQ,EAAEf,gBAAiB,CAAC;MAAA;MAC5BgB,KAAK,EAAEnB,IAAK,CAAC;MAAA;MACbK,aAAa,EAAEA,aAAc,CAAC;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAhCID,aAAa;AAAAsB,GAAA,GAAbtB,aAAa;AAkCnB,eAAeA,aAAa;AAAC,IAAAD,EAAA,EAAAuB,GAAA;AAAAC,YAAA,CAAAxB,EAAA;AAAAwB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}