{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\32223759\\\\Desktop\\\\Habit\\\\Frontend-hab-eat\\\\src\\\\pages\\\\ChallengePage.js\",\n  _s = $RefreshSig$();\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChallengePage = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const challenge = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.challenge;\n  const [date, setDate] = React.useState(new Date());\n\n  // 일별 챌린지 달성 데이터를 서버에서 가져오거나 초기화\n  const dailyChallenges = (challenge === null || challenge === void 0 ? void 0 : challenge.dailyChallenges) || {\n    // 예제 데이터 (서버에서 받아온 데이터를 사용할 수도 있음)\n    '2024-12-01': true,\n    '2024-12-02': false,\n    '2024-12-03': true,\n    '2024-12-04': false\n  };\n  const handleDateChange = newDate => {\n    setDate(newDate);\n  };\n  const formatDateToKey = date => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n  };\n  const isWeeklyChallengeCompleted = date => {\n    const startOfWeek = new Date(date);\n    const dayOfWeek = startOfWeek.getDay(); // 현재 요일(0: 일요일, 1: 월요일, ..., 6: 토요일)\n    const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 일요일(0)이면 -6, 나머지는 1 - dayOfWeek\n\n    startOfWeek.setDate(startOfWeek.getDate() + daysToMonday); // 월요일로 설정\n\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 해당 주의 일요일\n\n    let completedDays = 0;\n    for (let d = new Date(startOfWeek); d <= endOfWeek; d.setDate(d.getDate() + 1)) {\n      const dateKey = formatDateToKey(d);\n      if (dailyChallenges[dateKey]) {\n        completedDays += 1;\n      }\n    }\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\n  };\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\n      return 'react-calendar__tile--highlight';\n    }\n    return '';\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view === 'month') {\n      const dateKey = formatDateToKey(date);\n      if (dailyChallenges[dateKey]) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: habitIcon,\n          alt: \"\\uCC4C\\uB9B0\\uC9C0 \\uB2EC\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 16\n        }, this);\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"challengePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: (challenge === null || challenge === void 0 ? void 0 : challenge.title) || \"챌린지\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manage\",\n        children: /*#__PURE__*/_jsxDEV(StyledCalendar, {\n          locale: \"en-US\",\n          onChange: handleDateChange,\n          value: date,\n          tileContent: tileContent,\n          tileClassName: tileClassName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(ChallengePage, \"PLuplO0z15Lan+AjeV0efnnlWeI=\", false, function () {\n  return [useLocation];\n});\n_c = ChallengePage;\nexport default ChallengePage;\nvar _c;\n$RefreshReg$(_c, \"ChallengePage\");","map":{"version":3,"names":["useLocation","jsxDEV","_jsxDEV","ChallengePage","_s","_location$state","location","challenge","state","date","setDate","React","useState","Date","dailyChallenges","handleDateChange","newDate","formatDateToKey","getFullYear","String","getMonth","padStart","getDate","isWeeklyChallengeCompleted","startOfWeek","dayOfWeek","getDay","daysToMonday","endOfWeek","completedDays","d","dateKey","tileClassName","view","tileContent","src","habitIcon","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","children","title","StyledCalendar","locale","onChange","value","_c","$RefreshReg$"],"sources":["C:/Users/32223759/Desktop/Habit/Frontend-hab-eat/src/pages/ChallengePage.js"],"sourcesContent":["import { useLocation } from 'react-router-dom';\r\n\r\nconst ChallengePage = () => {\r\n  const location = useLocation();\r\n  const challenge = location.state?.challenge;\r\n\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  // 일별 챌린지 달성 데이터를 서버에서 가져오거나 초기화\r\n  const dailyChallenges = challenge?.dailyChallenges || {\r\n    // 예제 데이터 (서버에서 받아온 데이터를 사용할 수도 있음)\r\n    '2024-12-01': true,\r\n    '2024-12-02': false,\r\n    '2024-12-03': true,\r\n    '2024-12-04': false,\r\n  };\r\n\r\n  const handleDateChange = (newDate) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  const formatDateToKey = (date) => {\r\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n  };\r\n\r\n  const isWeeklyChallengeCompleted = (date) => {\r\n    const startOfWeek = new Date(date);\r\n    const dayOfWeek = startOfWeek.getDay(); // 현재 요일(0: 일요일, 1: 월요일, ..., 6: 토요일)\r\n    const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // 일요일(0)이면 -6, 나머지는 1 - dayOfWeek\r\n\r\n    startOfWeek.setDate(startOfWeek.getDate() + daysToMonday); // 월요일로 설정\r\n\r\n    const endOfWeek = new Date(startOfWeek);\r\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 해당 주의 일요일\r\n\r\n    let completedDays = 0;\r\n    for (\r\n      let d = new Date(startOfWeek);\r\n      d <= endOfWeek;\r\n      d.setDate(d.getDate() + 1)\r\n    ) {\r\n      const dateKey = formatDateToKey(d);\r\n      if (dailyChallenges[dateKey]) {\r\n        completedDays += 1;\r\n      }\r\n    }\r\n\r\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\r\n  };\r\n\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\r\n      return 'react-calendar__tile--highlight';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    if (view === 'month') {\r\n      const dateKey = formatDateToKey(date);\r\n      if (dailyChallenges[dateKey]) {\r\n        return <img src={habitIcon} alt=\"챌린지 달성\" />;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"challengePage\">\r\n      <div className=\"top\">\r\n        <h1 className=\"title\">{challenge?.title || \"챌린지\"}</h1> {/* 전달받은 챌린지 이름 */}\r\n      </div>\r\n      <div className=\"App\">\r\n        <div className=\"manage\">\r\n          <StyledCalendar\r\n            locale=\"en-US\"\r\n            onChange={handleDateChange}\r\n            value={date}\r\n            tileContent={tileContent}\r\n            tileClassName={tileClassName}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}