{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\32223759\\\\Desktop\\\\Habit\\\\Frontend-hab-eat\\\\src\\\\pages\\\\JoinPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoinPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // 참여 완료 후 돌아올 때 해당 챌린지 상태 업데이트\n  useEffect(() => {\n    if (location.state && location.state.participatedChallengeId) {\n      const participatedId = location.state.participatedChallengeId;\n      setChallenges(prevChallenges => prevChallenges.map(challenge => challenge.id === participatedId ? {\n        ...challenge,\n        status: 'participating'\n      } : challenge));\n      // 상태를 반영한 뒤, 주소 상태를 초기화하여 새로고침 시 재적용 안 되도록 함\n      navigate('/', {\n        replace: true\n      });\n    }\n  }, [location.state, navigate]);\n\n  // HabitPage에서 navigate 시 state로 전달한 id 받아오기\n  const {\n    id\n  } = location.state || {};\n  console.log(id);\n  const handleComplete = () => {\n    // 참여 완료 시 HabitPage로 돌아가며 participatedChallengeId를 전달\n    navigate('/', {\n      state: {\n        participatedChallengeId: id\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCC38\\uC5EC \\uC2E0\\uCCAD\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uCC4C\\uB9B0\\uC9C0 ID: \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleComplete,\n      children: \"\\uC644\\uB8CC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(JoinPage, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = JoinPage;\nexport default JoinPage;\nvar _c;\n$RefreshReg$(_c, \"JoinPage\");","map":{"version":3,"names":["React","useNavigate","useLocation","jsxDEV","_jsxDEV","JoinPage","_s","navigate","location","useEffect","state","participatedChallengeId","participatedId","setChallenges","prevChallenges","map","challenge","id","status","replace","console","log","handleComplete","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/32223759/Desktop/Habit/Frontend-hab-eat/src/pages/JoinPage.js"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst JoinPage = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n   // 참여 완료 후 돌아올 때 해당 챌린지 상태 업데이트\r\n   useEffect(() => {\r\n    if (location.state && location.state.participatedChallengeId) {\r\n      const participatedId = location.state.participatedChallengeId;\r\n      setChallenges(prevChallenges =>\r\n        prevChallenges.map(challenge =>\r\n          challenge.id === participatedId \r\n            ? { ...challenge, status: 'participating' }\r\n            : challenge\r\n        )\r\n      );\r\n      // 상태를 반영한 뒤, 주소 상태를 초기화하여 새로고침 시 재적용 안 되도록 함\r\n      navigate('/', { replace: true });\r\n    }\r\n  }, [location.state, navigate]);\r\n\r\n  // HabitPage에서 navigate 시 state로 전달한 id 받아오기\r\n  const { id } = location.state || {};\r\n  console.log(id);\r\n\r\n  const handleComplete = () => {\r\n    // 참여 완료 시 HabitPage로 돌아가며 participatedChallengeId를 전달\r\n    navigate('/', { state: { participatedChallengeId: id } });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>참여 신청하기</h1>\r\n      <p>챌린지 ID: {id}</p>\r\n      <button onClick={handleComplete}>완료</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JoinPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;;EAE7B;EACAO,SAAS,CAAC,MAAM;IACf,IAAID,QAAQ,CAACE,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACC,uBAAuB,EAAE;MAC5D,MAAMC,cAAc,GAAGJ,QAAQ,CAACE,KAAK,CAACC,uBAAuB;MAC7DE,aAAa,CAACC,cAAc,IAC1BA,cAAc,CAACC,GAAG,CAACC,SAAS,IAC1BA,SAAS,CAACC,EAAE,KAAKL,cAAc,GAC3B;QAAE,GAAGI,SAAS;QAAEE,MAAM,EAAE;MAAgB,CAAC,GACzCF,SACN,CACF,CAAC;MACD;MACAT,QAAQ,CAAC,GAAG,EAAE;QAAEY,OAAO,EAAE;MAAK,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,CAACX,QAAQ,CAACE,KAAK,EAAEH,QAAQ,CAAC,CAAC;;EAE9B;EACA,MAAM;IAAEU;EAAG,CAAC,GAAGT,QAAQ,CAACE,KAAK,IAAI,CAAC,CAAC;EACnCU,OAAO,CAACC,GAAG,CAACJ,EAAE,CAAC;EAEf,MAAMK,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAf,QAAQ,CAAC,GAAG,EAAE;MAAEG,KAAK,EAAE;QAAEC,uBAAuB,EAAEM;MAAG;IAAE,CAAC,CAAC;EAC3D,CAAC;EAED,oBACEb,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBvB,OAAA;MAAAmB,QAAA,GAAG,yBAAQ,EAACN,EAAE;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBvB,OAAA;MAAQwB,OAAO,EAAEN,cAAe;MAAAC,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAACrB,EAAA,CApCID,QAAQ;EAAA,QACKJ,WAAW,EACXC,WAAW;AAAA;AAAA2B,EAAA,GAFxBxB,QAAQ;AAsCd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}