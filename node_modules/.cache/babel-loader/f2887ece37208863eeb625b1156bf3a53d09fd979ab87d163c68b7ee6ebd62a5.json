{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\32223759\\\\Desktop\\\\Habit\\\\Frontend-hab-eat\\\\src\\\\pages\\\\ChallengePage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport styled from 'styled-components';\nimport 'react-calendar/dist/Calendar.css';\nimport habitIcon from \"../img/habit-icon.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCalendar = styled(Calendar)`\n  width: 100%; /* 캘린더를 부모 요소의 너비에 맞게 설정 */\n  max-width: 600px; /* 캘린더의 최대 너비를 제한 */\n  height: 100%; /* 캘린더 높이 비율 */\n  min-height: 500px; /* 최소 높이 설정 */\n//   padding: 20px; /* 내부 여백 */\n  height: 150%;\n  margin: 0 auto; /* 중앙 정렬 */\n  border: none; /* 기본 테두리 제거 */\n//   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* 그림자 추가 (선택 사항) */\n\n  .react-calendar__tile {\n    background-color: #fdfdfd;\n    color: #8E8E8E;\n    height: 70px; /* 타일의 높이를 늘림 */\n    position: relative; /* 아이콘을 위해 상대 위치 설정 */\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  .react-calendar__month-view__days__day {\n    height: 70px; /* 일별 셀 높이 */\n  }\n\n  .react-calendar__tile--highlight {\n    background-color: #c5f5d1; /* 주간 챌린지 달성 하이라이트 */\n  }\n\n  .react-calendar__navigation {\n  display: flex; /* flex를 제거하고 버튼 크기 고정 */\n\n  .tile-icon {\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    font-size: 14px;\n    color: #00C5A1;\n  }\n  \n}\n\n  .react-calendar__tile--now {\n    background-color:  #00C5A1;\n    font-weight: bold;\n    color: #fdfdfd;\n  }\n\n  .react-calendar__tile--active {\n    // background-color: #00C5A1;\n    color: white;\n  }\n\n  .react-calendar__navigation__label {\n    font-size: 16px;\n    font-weight: bold;\n    color: #00C5A1;\n  }\n\n  button {\n    width: auto;\n    // min-width: 70px;\n  }\n\n  .react-calendar__navigation__arrow {\n    background-color: transparent;\n    border: none;\n    color: #00C5A1;\n  }\n`;\n_c = StyledCalendar;\nconst ChallengePage = () => {\n  _s();\n  const [date, setDate] = React.useState(new Date());\n\n  // 예제: 각 날짜의 챌린지 달성 여부 데이터\n  const dailyChallenges = {\n    '2024-12-01': true,\n    '2024-12-02': true,\n    '2024-12-03': false,\n    '2024-12-04': true,\n    '2024-12-05': true,\n    '2024-12-06': true,\n    '2024-12-07': false,\n    '2024-12-08': true,\n    '2024-12-19': true\n  };\n  const handleDateChange = newDate => {\n    setDate(newDate);\n  };\n  const formatDateToKey = date => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n  };\n\n  // 주간 챌린지 달성 여부 확인 함수\n  const isWeeklyChallengeCompleted = date => {\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // 월요일\n    console.log(startOfWeek);\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 일요일\n    console.log(endOfWeek);\n    let completedDays = 0;\n    for (let d = new Date(startOfWeek); d <= endOfWeek; d.setDate(d.getDate() + 1)) {\n      //   const dateKey = d.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n      const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\n      console.log(dateKey);\n      if (dailyChallenges[dateKey]) {\n        completedDays += 1;\n      }\n    }\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\n  };\n\n  // 각 날짜의 스타일 결정\n  const tileClassName = ({\n    date,\n    view\n  }) => {\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\n      return 'react-calendar__tile--highlight';\n    }\n    return '';\n  };\n\n  // 각 날짜에 아이콘 추가\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    if (view === 'month') {\n      //   const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n      const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\n      console.log(dateKey);\n      if (dailyChallenges[dateKey]) {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: habitIcon // 성공한 날짜에 habitIcon 사용\n          ,\n          alt: \"\\uCC4C\\uB9B0\\uC9C0 \\uB2EC\\uC131\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 16\n        }, this); // 달성 아이콘\n      }\n      //   return <span className=\"tile-icon\">✖</span>; // 미달성 아이콘\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCC4C\\uB9B0\\uC9C0 \\uAD00\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledCalendar, {\n      onChange: handleDateChange,\n      value: date,\n      tileContent: tileContent // 날짜별 아이콘 표시\n      ,\n      tileClassName: tileClassName // 주간 달성 여부 하이라이트\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(ChallengePage, \"rW+rxy2mJ1oFEB1Cqg4Z2uVJym0=\");\n_c2 = ChallengePage;\nexport default ChallengePage;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCalendar\");\n$RefreshReg$(_c2, \"ChallengePage\");","map":{"version":3,"names":["React","Calendar","styled","habitIcon","jsxDEV","_jsxDEV","StyledCalendar","_c","ChallengePage","_s","date","setDate","useState","Date","dailyChallenges","handleDateChange","newDate","formatDateToKey","getFullYear","String","getMonth","padStart","getDate","isWeeklyChallengeCompleted","startOfWeek","getDay","console","log","endOfWeek","completedDays","d","dateKey","tileClassName","view","tileContent","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onChange","value","_c2","$RefreshReg$"],"sources":["C:/Users/32223759/Desktop/Habit/Frontend-hab-eat/src/pages/ChallengePage.js"],"sourcesContent":["import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport styled from 'styled-components';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport habitIcon from \"../img/habit-icon.png\";\r\n\r\nconst StyledCalendar = styled(Calendar)`\r\n  width: 100%; /* 캘린더를 부모 요소의 너비에 맞게 설정 */\r\n  max-width: 600px; /* 캘린더의 최대 너비를 제한 */\r\n  height: 100%; /* 캘린더 높이 비율 */\r\n  min-height: 500px; /* 최소 높이 설정 */\r\n//   padding: 20px; /* 내부 여백 */\r\n  height: 150%;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n  border: none; /* 기본 테두리 제거 */\r\n//   box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* 그림자 추가 (선택 사항) */\r\n\r\n  .react-calendar__tile {\r\n    background-color: #fdfdfd;\r\n    color: #8E8E8E;\r\n    height: 70px; /* 타일의 높이를 늘림 */\r\n    position: relative; /* 아이콘을 위해 상대 위치 설정 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .react-calendar__month-view__days__day {\r\n    height: 70px; /* 일별 셀 높이 */\r\n  }\r\n\r\n  .react-calendar__tile--highlight {\r\n    background-color: #c5f5d1; /* 주간 챌린지 달성 하이라이트 */\r\n  }\r\n\r\n  .react-calendar__navigation {\r\n  display: flex; /* flex를 제거하고 버튼 크기 고정 */\r\n\r\n  .tile-icon {\r\n    position: absolute;\r\n    bottom: 5px;\r\n    right: 5px;\r\n    font-size: 14px;\r\n    color: #00C5A1;\r\n  }\r\n  \r\n}\r\n\r\n  .react-calendar__tile--now {\r\n    background-color:  #00C5A1;\r\n    font-weight: bold;\r\n    color: #fdfdfd;\r\n  }\r\n\r\n  .react-calendar__tile--active {\r\n    // background-color: #00C5A1;\r\n    color: white;\r\n  }\r\n\r\n  .react-calendar__navigation__label {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    color: #00C5A1;\r\n  }\r\n\r\n  button {\r\n    width: auto;\r\n    // min-width: 70px;\r\n  }\r\n\r\n  .react-calendar__navigation__arrow {\r\n    background-color: transparent;\r\n    border: none;\r\n    color: #00C5A1;\r\n  }\r\n`;\r\n\r\n\r\nconst ChallengePage = () => {\r\n  const [date, setDate] = React.useState(new Date());\r\n\r\n  // 예제: 각 날짜의 챌린지 달성 여부 데이터\r\n  const dailyChallenges = {\r\n    '2024-12-01': true,\r\n    '2024-12-02': true,\r\n    '2024-12-03': false,\r\n    '2024-12-04': true,\r\n    '2024-12-05': true,\r\n    '2024-12-06': true,\r\n    '2024-12-07': false,\r\n    '2024-12-08': true,\r\n    '2024-12-19': true,\r\n  };\r\n\r\n  const handleDateChange = (newDate) => {\r\n    setDate(newDate);\r\n  };\r\n\r\n  const formatDateToKey = (date) => {\r\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\r\n  };\r\n\r\n // 주간 챌린지 달성 여부 확인 함수\r\n const isWeeklyChallengeCompleted = (date) => {\r\n    const startOfWeek = new Date(date);\r\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay() + 1); // 월요일\r\n    console.log(startOfWeek);\r\n\r\n    const endOfWeek = new Date(startOfWeek);\r\n    endOfWeek.setDate(endOfWeek.getDate() + 6); // 일요일\r\n    console.log(endOfWeek);\r\n\r\n    let completedDays = 0;\r\n    for (\r\n      let d = new Date(startOfWeek);\r\n      d <= endOfWeek;\r\n      d.setDate(d.getDate() + 1)\r\n    ) {\r\n    //   const dateKey = d.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\r\n      console.log(dateKey);\r\n      if (dailyChallenges[dateKey]) {\r\n        completedDays += 1;\r\n      }\r\n    }\r\n\r\n    return completedDays >= 5; // 예: 5일 이상 달성해야 주간 챌린지 달성\r\n  };\r\n\r\n  // 각 날짜의 스타일 결정\r\n  const tileClassName = ({ date, view }) => {\r\n    if (view === 'month' && isWeeklyChallengeCompleted(date)) {\r\n      return 'react-calendar__tile--highlight';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  // 각 날짜에 아이콘 추가\r\n  const tileContent = ({ date, view }) => {\r\n    if (view === 'month') {\r\n    //   const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    const dateKey = formatDateToKey(d); // 로컬 시간을 기반으로 날짜를 생성\r\n      console.log(dateKey);\r\n      if (dailyChallenges[dateKey]) {\r\n        return <img\r\n        src={habitIcon} // 성공한 날짜에 habitIcon 사용\r\n        alt=\"챌린지 달성\"\r\n      />; // 달성 아이콘\r\n      }\r\n    //   return <span className=\"tile-icon\">✖</span>; // 미달성 아이콘\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>챌린지 관리</h1>\r\n      <StyledCalendar\r\n        onChange={handleDateChange}\r\n        value={date}\r\n        tileContent={tileContent} // 날짜별 아이콘 표시\r\n        tileClassName={tileClassName} // 주간 달성 여부 하이라이트\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallengePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}